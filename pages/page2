   st.subheader("Edit or Confirm Your Name for Your Badge(s)")

   if st.session_state.auth_status == 'authed':
        with st.form("badge_name_and_email"):
            st.write("Confirm Your Name for Any Badges That Might Be Issued")     
            edited_given = st.text_input("Given Name (Name used to greet you)", st.session_state.given_name)
            edited_middle = st.text_input('Middle Name/Nickname/Alternate-Spelling (Optional)', st.session_state.middle_name)
            edited_family = st.text_input('Family Name', st.session_state.family_name)
            edited_email = st.text_input("The Email Address You Want Your Badge Sent To (does not have to match UNI, Snowflake Trial, or Work):", st.session_state.badge_email)
            submit_edits = st.form_submit_button("Update My Badge Name & Badge Email")  

        if submit_edits:
            session.call('AMAZING.APP.UPDATE_BADGENAME_BADGEEMAIL_SP',uni_id, uni_uuid, edited_given, edited_middle, edited_family, edited_email)
            get_user_profile_info() 
            st.success('Badge Name & Email Updated', icon='ðŸš€')

   else: # not authed
        st.markdown(":red[Please sign in using your UNI_ID and UUID in the section above.]")  


   st.subheader("Format the Display of Your Name on Your Badge(s)")

   if st.session_state.auth_status == 'authed':
      with st.form("display_formatting"):
            display_option_1 = edited_given.capitalize() + " " + edited_middle.capitalize() + " " + edited_family.capitalize() #lazy do it for me
            display_option_2 = edited_given.capitalize() + " " + edited_middle.capitalize() + " " + edited_family #european w nobiliary
            display_option_3 = edited_family.upper() + " " + edited_middle + " " + edited_given.capitalize()  #east asian with alt script middle
            display_option_4 = edited_family.upper() + " " +  edited_given.capitalize() + " " + edited_middle.capitalize() #east asian with alt script middle
            display_option_5 = edited_given.capitalize() + " " +  edited_middle.capitalize() + " " + edited_family.upper() #ze french

            badge_name_order = st.radio("Name Display Order You Prefer:",                            
                                  [display_option_1, display_option_2, display_option_3, display_option_4, display_option_5],
                                  captions = ["Common in Anglo Traditions", "For names with nobiliary particles", "For use with dual script like ì „ JEON Joon-kook ì •êµ­ ", "For cultures that put FAMILY name first", "Common for French and Francophonic"]
                                   )
            submit_display_format = st.form_submit_button("Record My Name Display Preference")

      if submit_display_format:
            if badge_name_order == display_option_1:
                display_format = 1
                edited_display_name = display_option_1     
            elif badge_name_order == display_option_2:
                display_format = 2
                edited_display_name = display_option_2    
            elif badge_name_order == display_option_3:
                display_format = 3
                edited_display_name = display_option_3         
            elif badge_name_order == display_option_4:
                display_format = 4
                edited_display_name = display_option_4
            elif badge_name_order == display_option_5:
                display_format = 5
                edited_display_name = display_option_5
            else: 
                st.write('Choose a format for your name')

            session.call('AMAZING.APP.UPDATE_BADGE_DISPLAYNAME_SP',uni_id, uni_uuid, display_format, edited_display_name)
            get_user_profile_info()
            st.success('Badge Display Name Updated', icon='ðŸš€')
   else: # not authed
         st.markdown(":red[Please sign in using your UNI_ID and UUID in the section above.]")  


   st.subheader("View Trial Account Information You've Entered")

   if st.session_state.auth_status == 'authed':
      # display of info for all registered workshops
      get_user_workshop_acct_info()        

      # drop list with option button for editing
      st.session_state.workshop_choice =  st.selectbox("Choose Workshop/Badge want to enter/edit account info for:"
                                                      , ('Badge 1: DWW', 'Badge 2: CMCW', 'Badge 3: DABW', 'Badge 4: DLKW', 'Badge 5: DNGW')
                                                      , on_change = workshop_chosen_changed()
                                                      , key=1)
      workshop_to_view = st.button("Create/Edit Acct Info for Chosen Workshop") 

      if workshop_to_view: #button clicked
         st.session_state.editing_workshop=True

   ##******* gets sub form to show up ********
      # clicking above button makes this appear by setting property to True
      if st.session_state.editing_workshop==True:    
         get_workshop_info()
         with st.form("edit_acct_info"):
            st.markdown("**Edit Trial Account Info for " + st.session_state.workshop_choice + "**")
            edited_acct_id = st.text_input("Enter Your Account Identifier as found in your Snowflake Account:", st.session_state.account_identifier)
            edited_acct_loc = st.text_input("Enter Your Account Locator as found in your Snowflake Account:", st.session_state.account_locator)
            submit_button = st.form_submit_button("Update Trial Account Info")

            if submit_button: 
               st.session_state.submit_new_acct_info=True
               st.session_state.edited_acct_id = edited_acct_id
               st.session_state.edited_acct_loc = edited_acct_loc


      if st.session_state.submit_new_acct_info==True: 
            #st.write(f"You submited ACCOUNT IDENTIFIER {st.session_state.edited_acct_id} and ACCOUNT LOCATOR {st.session_state.edited_acct_loc} for Workshop {st.session_state.workshop_choice}")
            st.write("under the if")

      st.write('Outside the form')
      st.write("EDITED ACCOUNT ID IS: "+ st.session_state.edited_acct_id)

   else: # not authed
         st.markdown(":red[Please sign in using your UNI_ID and UUID in the section above.]")  


        #with st.form("workshops"):  
         #   st.write("editing will happen here")
         #   workshop_chosen = st.form_submit_button("Show Data on My Chosen Workshop")

with tab5:
   st.write("just a placeholder for now")
